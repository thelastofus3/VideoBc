version: '3.8'

volumes:
  traefik-certificates:
  db:
  redis-data:

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.email=youremail@example.com"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
    networks:
      - kafka-network
  backend:
    build:
      context: ./video-backend
      dockerfile: Dockerfile
    container_name: quarkus-backend
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - kafka
      - redis
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:mysql://mysql:3306/${MYSQL_DATABASE}
      - QUARKUS_DATASOURCE_USERNAME=${MYSQL_USER}
      - QUARKUS_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - QUARKUS_HTTP_CORS=true
      - QUARKUS_HTTP_CORS_ORIGINS=*
      - QUARKUS_HTTP_CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - QUARKUS_HTTP_CORS_HEADERS=accept,authorization,content-type,x-requested-with
      - QUARKUS_HTTP_CORS_EXPOSED_HEADERS=Authorization
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.videoconf.store`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=le"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    networks:
      - kafka-network

  mysql:
    container_name: mysql
    image: 'mysql:latest'
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - '3306:3306'
    volumes:
      - db:/var/lib/mysql
    networks:
      - kafka-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "mysql" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  redis:
    container_name: redis
    image: 'redis:latest'
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - kafka-network

  zookeeper:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - kafka-network

  kafka:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - kafka-network

  frontend:
    build:
      context: ./video-frontend
      dockerfile: Dockerfile
    container_name: react-frontend
    ports:
      - "80:80"
    depends_on:
      - mysql
      - kafka
      - redis
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`videoconf.store`,`www.videoconf.store`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=le"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - kafka-network

networks:
  kafka-network:
    name: kafkastart
