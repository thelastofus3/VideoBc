version: '3.8'

volumes:
  db:
  redis-data:

services:
  backend:
    build:
      context: ./video-backend
      dockerfile: Dockerfile
    container_name: quarkus-backend
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - kafka
      - redis
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:mysql://mysql:3306/${MYSQL_DATABASE}
      - QUARKUS_DATASOURCE_USERNAME=${MYSQL_USER}
      - QUARKUS_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - QUARKUS_HTTP_CORS=true
      - QUARKUS_HTTP_CORS_ORIGINS=*
      - QUARKUS_HTTP_CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - QUARKUS_HTTP_CORS_HEADERS=accept,authorization,content-type,x-requested-with
      - QUARKUS_HTTP_CORS_EXPOSED_HEADERS=Authorization
    networks:
      - kafka-network

  mysql:
    container_name: mysql
    image: 'mysql:latest'
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - '3306:3306'
    volumes:
      - db:/var/lib/mysql
    networks:
      - kafka-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "mysql" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  redis:
    container_name: redis
    image: 'redis:latest'
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - kafka-network

  frontend:
    build:
      context: ./video-frontend
      dockerfile: Dockerfile
    container_name: react-frontend
    ports:
      - "80:80"
    depends_on:
      - mysql
      - kafka
      - redis
      - backend
    networks:
      - kafka-network

networks:
  kafka-network:
    name: kafkastart